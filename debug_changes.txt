diff --git a/frontend/src/styles/_workspace.scss b/frontend/src/styles/_workspace.scss
index e5c692b..5d87f40 100644
--- a/frontend/src/styles/_workspace.scss
+++ b/frontend/src/styles/_workspace.scss
@@ -228,3 +228,8 @@
     height: 420 * 1.2
   }
 }
+
+.ace_gutter-cell.ace_breakpoint{ 
+    border-radius: 20px 0px 0px 20px; 
+    box-shadow: 0px 0px 1px 1px red inset; 
+}
\ No newline at end of file
diff --git a/frontend/src/workspace/actionTypes.ts b/frontend/src/workspace/actionTypes.ts
index 5916c27..17aca37 100644
--- a/frontend/src/workspace/actionTypes.ts
+++ b/frontend/src/workspace/actionTypes.ts
@@ -8,7 +8,9 @@ export const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB'
 
 /** Editor */
 export const SET_EDITOR_VALUE = 'SET_EDITOR_VALUE'
+export const SET_BREAKPOINTS = 'SET_BREAKPOINTS'
 export const EVAL_EDITOR = 'EVAL_EDITOR'
+export const DEBUG_EDITOR = 'DEBUG_EDITOR'
 export const SAVE_EDITOR = 'SAVE_EDITOR'
 export const SAVE_EDITOR_SUCCESS = 'SAVE_EDITOR_SUCCESS'
 
diff --git a/frontend/src/workspace/actions.ts b/frontend/src/workspace/actions.ts
index e372d12..b180208 100644
--- a/frontend/src/workspace/actions.ts
+++ b/frontend/src/workspace/actions.ts
@@ -27,7 +27,13 @@ export const setEditorValue = (code: string) => ({
   payload: code
 })
 
+export const setBreakpoints = (breakpoints: any) => ({
+  type: actionTypes.SET_BREAKPOINTS,
+  payload: breakpoints
+})
+
 export const evalEditor = () => ({ type: actionTypes.EVAL_EDITOR })
+export const debugEditor = () => ({ type: actionTypes.DEBUG_EDITOR })
 
 export const evalInterpreter = (code: string) => ({
   type: actionTypes.EVAL_INTERPRETER,
diff --git a/frontend/src/workspace/components/Editor.tsx b/frontend/src/workspace/components/Editor.tsx
index 8fb7fea..b0a009f 100644
--- a/frontend/src/workspace/components/Editor.tsx
+++ b/frontend/src/workspace/components/Editor.tsx
@@ -13,6 +13,7 @@ export type Props = OwnProps & {
   initialValue: string
   isReadOnly: boolean
   setEditorValue: (value: string) => any
+  setBreakpoints: (breakpoints: any) => any
 }
 
 const mapStateToProps = (state: Shape, ownProps: OwnProps) => ({
@@ -23,7 +24,8 @@ const mapStateToProps = (state: Shape, ownProps: OwnProps) => ({
 const mapDispatchToProps = (dispatch: Dispatch<Shape>) =>
   bindActionCreators(
     {
-      setEditorValue: actions.setEditorValue
+      setEditorValue: actions.setEditorValue,
+      setBreakpoints: actions.setBreakpoints
     },
     dispatch
   )
@@ -41,6 +43,55 @@ class Editor extends React.Component<Props, any> {
   async componentDidMount() {
     const $editor = findDOMNode(this.$editor!) as HTMLElement
     const editor = await createEditor($editor, this.props.initialValue)
+    editor.on('guttermousedown', e => {
+      var target = e.domEvent.target
+      if (target.className.indexOf('ace_gutter-cell') == -1) return
+      if (!editor.isFocused()) return
+      if (e.clientX > 25 + target.getBoundingClientRect().left) return
+
+      var row = e.getDocumentPosition().row
+      var breakpoints = e.editor.session.getBreakpoints(row, 0)
+
+      if (typeof breakpoints[row] === typeof undefined)
+        e.editor.session.setBreakpoint(row)
+      else e.editor.session.clearBreakpoint(row)
+      this.props.setBreakpoints(editor.session.getBreakpoints())
+
+      e.stop()
+    })
+    editor.getSession().on('change', e => {
+      var breakpointsArray = editor.session.getBreakpoints()
+      if (Object.keys(editor.session.getBreakpoints()).length > 0) {
+        if (e.lines.length > 1) {
+          var breakpoint = parseInt(Object.keys(breakpointsArray)[0])
+          var lines = e.lines.length - 1
+          var start = e.start.row
+          var end = e.end.row
+          if (e.action === 'insert') {
+            //console.log('new lines',breakpoint, start , end );
+            if (breakpoint >= start) {
+              //console.log('breakpoint forward');
+              editor.session.clearBreakpoint(breakpoint)
+              editor.session.setBreakpoint(breakpoint + lines)
+            }
+          } else if (e.action === 'remove') {
+            //console.log('removed lines',breakpoint, start , end);
+            if (breakpoint > start && breakpoint < end) {
+              //console.log('breakpoint remove');
+              editor.session.clearBreakpoint(breakpoint)
+            }
+            if (breakpoint >= end) {
+              //console.log('breakpoint behind');
+              editor.session.clearBreakpoint(breakpoint)
+              editor.session.setBreakpoint(breakpoint - lines)
+            }
+          }
+        }
+      }
+      //e.editor.props.setBreakpoints(breakpointsArray)
+      this.props.setBreakpoints(editor.session.getBreakpoints())
+    })
+
     editor.getSession().on('change', () => {
       this.props.setEditorValue(editor.getValue())
     })
diff --git a/frontend/src/workspace/components/PlaygroundControl.tsx b/frontend/src/workspace/components/PlaygroundControl.tsx
index 8e43b75..d879832 100644
--- a/frontend/src/workspace/components/PlaygroundControl.tsx
+++ b/frontend/src/workspace/components/PlaygroundControl.tsx
@@ -32,6 +32,7 @@ export type Props = {
   setFilename: (to: string) => any
   setLibrary: (to: string) => any
   evalEditor: () => any
+  debugEditor: () => any
   saveEditor: () => any
   interruptExecution: () => any
 }
@@ -58,6 +59,7 @@ const mapDispatchToProps = (dispatch: Dispatch<Shape>) =>
       setLibrary: actions.setLibrary,
       setFilename: actions.setFilename,
       evalEditor: actions.evalEditor,
+      debugEditor: actions.debugEditor,
       saveEditor: actions.saveEditor,
       interruptExecution: actions.interruptExecution
     },
@@ -71,8 +73,7 @@ const getSaveButton = (props: Props) => {
   if (isShown) {
     const intent = isDirty ? Intent.WARNING : Intent.NONE
     return (
-      <Button intent={intent} onClick={saveEditor}
-        iconName="floppy-disk">
+      <Button intent={intent} onClick={saveEditor} iconName="floppy-disk">
         Save
       </Button>
     )
@@ -81,7 +82,7 @@ const getSaveButton = (props: Props) => {
   }
 }
 
-const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
+const PlaygroundControl: React.StatelessComponent<Props> = props => {
   const {
     isPlayground,
     setLayoutType,
@@ -90,6 +91,7 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
     isReadOnly,
     setFilename,
     evalEditor,
+    debugEditor,
     libraries,
     library,
     nextAction,
@@ -97,13 +99,11 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
     questionType,
     interruptExecution,
     isExecuting
-    } = props
+  } = props
   let filenameInput
   const isProgramming = questionType === 'programming_question'
 
-  const handleChangeFilename = (
-    event: React.ChangeEvent<HTMLInputElement>
-  ) => {
+  const handleChangeFilename = (event: React.ChangeEvent<HTMLInputElement>) => {
     const value = event.target.value
     setFilename(value)
   }
@@ -125,23 +125,32 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
   const genericButton = (
     label: string,
     icon: string,
-    handleClick = () => { },
+    handleClick = () => {},
     intent = Intent.NONE,
     notMinimal = false
-  ) =>
-    (<Button
+  ) => (
+    <Button
       onClick={handleClick}
-      className={notMinimal ? "" : "pt-minimal"}
+      className={notMinimal ? '' : 'pt-minimal'}
       intent={intent}
       iconName={icon}
     >
       {label}
     </Button>
-    )
-  const runButton = ((isPlayground || isProgramming) && !isExecuting)
-    && genericButton('Run', 'play', evalEditor)
-  const stopButton = ((isPlayground || isProgramming) && isExecuting)
-    && genericButton('Stop', 'dismiss', interruptExecution, Intent.DANGER, true)
+  )
+
+  const debugButton =
+    (isPlayground || isProgramming) &&
+    !isExecuting &&
+    genericButton('Debug', 'play', debugEditor)
+  const runButton =
+    (isPlayground || isProgramming) &&
+    !isExecuting &&
+    genericButton('Run', 'play', evalEditor)
+  const stopButton =
+    (isPlayground || isProgramming) &&
+    isExecuting &&
+    genericButton('Stop', 'dismiss', interruptExecution, Intent.DANGER, true)
   const saveButton = getSaveButton(props)
   let nextButton = null
   let previousButton = null
@@ -150,27 +159,35 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
     if (nextAction && /submit/.test(nextAction)) {
       if (isReadOnly) {
         nextButton = (
-          <a className='pt-button pt-icon-tick pt-disabled'
-            href={nextAction}>
+          <a className="pt-button pt-icon-tick pt-disabled" href={nextAction}>
             <span>Submitted</span>
           </a>
         )
       } else {
         nextButton = (
-          <a className='pt-button pt-intent-success pt-icon-send-to' href={nextAction}>
+          <a
+            className="pt-button pt-intent-success pt-icon-send-to"
+            href={nextAction}
+          >
             <span>Submit</span>
           </a>
         )
       }
     } else {
       nextButton = (
-        <a className='pt-button pt-minimal pt-intent-success pt-icon-chevron-right' href={nextAction}>
+        <a
+          className="pt-button pt-minimal pt-intent-success pt-icon-chevron-right"
+          href={nextAction}
+        >
           <span>Next</span>
         </a>
       )
     }
     previousButton = (
-      <a className='pt-button pt-minimal pt-intent-success pt-icon-chevron-left' href={previousAction}>
+      <a
+        className="pt-button pt-minimal pt-intent-success pt-icon-chevron-left"
+        href={previousAction}
+      >
         <span>Previous</span>
       </a>
     )
@@ -183,11 +200,11 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
   const weekInput = isPlayground && (
     <div className="pt-select">
       <select defaultValue={library} onChange={handleSelectChange}>
-        {libraries.map(name =>
+        {libraries.map(name => (
           <option key={name} value={name}>
             {name}
           </option>
-        )}
+        ))}
       </select>
     </div>
   )
@@ -229,6 +246,7 @@ const PlaygroundControl: React.StatelessComponent<Props> = (props) => {
       </div>
       <div className="tabs pt-navbar-group col-xs end-xs">
         {runButton}
+        {debugButton}
         {stopButton}
         {saveButton}
         {saveButton && <span className="pt-navbar-divider" />}
diff --git a/frontend/src/workspace/reducers/editor.ts b/frontend/src/workspace/reducers/editor.ts
index 872ea2d..869b602 100644
--- a/frontend/src/workspace/reducers/editor.ts
+++ b/frontend/src/workspace/reducers/editor.ts
@@ -4,7 +4,8 @@ import * as actionTypes from '../actionTypes'
 
 const init: EditorState = {
   value: '',
-  isDirty: false
+  isDirty: false,
+  breakpoints: null
 }
 
 const editorReducer: Reducer<EditorState> = (state = init, action) => {
@@ -14,6 +15,13 @@ const editorReducer: Reducer<EditorState> = (state = init, action) => {
         ...state,
         isDirty: false
       }
+
+    case actionTypes.SET_BREAKPOINTS:
+      return {
+        ...state,
+        breakpoints: action.payload
+      }
+
     case actionTypes.SET_EDITOR_VALUE:
       return {
         ...state,
diff --git a/frontend/src/workspace/reducers/interpreter.ts b/frontend/src/workspace/reducers/interpreter.ts
index e2fab4f..ba5895e 100644
--- a/frontend/src/workspace/reducers/interpreter.ts
+++ b/frontend/src/workspace/reducers/interpreter.ts
@@ -27,6 +27,7 @@ const interpreterReducer: Reducer<InterpreterState> = (
         ...state,
         outputs: []
       }
+
     case actionTypes.CREATE_INTERPRETER_OUTPUT:
       return {
         ...state,
diff --git a/frontend/src/workspace/sagas/index.ts b/frontend/src/workspace/sagas/index.ts
index 9085e0f..9d53ee6 100644
--- a/frontend/src/workspace/sagas/index.ts
+++ b/frontend/src/workspace/sagas/index.ts
@@ -6,7 +6,12 @@ import { takeEvery, select, call, put, take, race } from 'redux-saga/effects'
 
 import { showSuccessMessage, showWarningMessage } from '../notification'
 import { Shape } from '../shape'
-import { Context, createContext, runInContext, interrupt } from '../../toolchain'
+import {
+  Context,
+  createContext,
+  runInContext,
+  interrupt
+} from '../../toolchain'
 
 import * as actionTypes from '../actionTypes'
 import * as actions from '../actions'
@@ -35,6 +40,7 @@ function* syncURLSaga(): SagaIterator {
   yield takeEvery(
     [
       actionTypes.SET_EDITOR_VALUE,
+      actionTypes.SET_BREAKPOINTS,
       actionTypes.SET_FILENAME,
       actionTypes.SET_READ_ONLY,
       actionTypes.SET_LIBRARY
@@ -51,8 +57,27 @@ async function postComment(content: string, codeID: string) {
   return comment
 }
 
+function addCode(js) {
+  var e = document.createElement('script')
+  e.type = 'text/javascript'
+  e.src = 'data:text/javascript;charset=utf-8,' + escape(js)
+  document.body.appendChild(e)
+}
+
+function* debugCode(code: string, breakpoints: any) {
+  var splitCode = code.split('\n')
+  splitCode.map((x, index) => {
+    if (typeof breakpoints[index] !== typeof undefined) {
+      splitCode[index] = x + ' debugger;'
+    }
+  })
+
+  code = splitCode.join('\n')
+  addCode(code)
+}
+
 function* evalCode(code: string, context: Context) {
-  const {result, interrupted} = yield race({
+  const { result, interrupted } = yield race({
     result: call(runInContext, code, context),
     interrupted: take(actionTypes.INTERRUPT_EXECUTION)
   })
@@ -78,6 +103,13 @@ function* interpreterSaga(): SagaIterator {
     yield* evalCode(code, context)
   })
 
+  yield takeEvery(actionTypes.DEBUG_EDITOR, function*() {
+    const code = yield select((state: Shape) => state.editor.value)
+    const breakpoints = yield select((state: Shape) => state.editor.breakpoints)
+    context = createContext(library.week, library.externals)
+    yield* debugCode(code, breakpoints)
+  })
+
   yield takeEvery(actionTypes.SET_LIBRARY_SUCCESS, function*() {
     yield put(actions.clearInterpreter())
     library = yield select((state: Shape) => state.config.library)
diff --git a/frontend/src/workspace/shape.ts b/frontend/src/workspace/shape.ts
index 9daead3..4ff98e1 100644
--- a/frontend/src/workspace/shape.ts
+++ b/frontend/src/workspace/shape.ts
@@ -80,6 +80,7 @@ export type EditorState = {
   id?: string
   isDirty: boolean
   value: string
+  breakpoints: any
 }
 
 export type DebugState = {
diff --git a/frontend/src/workspace/util/getInitialState.ts b/frontend/src/workspace/util/getInitialState.ts
index f4b2794..3f2da88 100644
--- a/frontend/src/workspace/util/getInitialState.ts
+++ b/frontend/src/workspace/util/getInitialState.ts
@@ -5,7 +5,7 @@ import getInitialPlaygroundState from './getInitialPlaygroundState'
 
 const DEFAULT_LIBRARY = {
   title: 'source_week_3',
-  week: 3,
+  week: 10,
   externals: [],
   files: [],
   globals: []
